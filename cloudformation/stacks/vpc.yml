AWSTemplateFormatVersion: '2010-09-09'
Description: VPC cloudformation. VPC has 2 public subnet and 2 private subnet.

###################
# VPC Parameters
###################

Parameters:

  Name:
    Type: String
    Description: "A friendly name that will be used for vpc resources."

  EnvironmentName:
    Type: String
    Description: "A friendly environment name that will be used for namespacing all cluster resources. Example: staging, qa, or production"

###################
# Subnets config
###################

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '172.10.0.0/21'

    PublicOne:
      CIDR: '172.10.0.0/24'
    
    PublicTwo:
      CIDR: '172.10.1.0/24'
    
    PrivateOne:
      CIDR: '172.10.2.0/24'

    PrivateTwo:
      CIDR: '172.10.3.0/24'

    PrivateDbOne:
      CIDR: '172.10.4.0/24'

    PrivateDbTwo:
      CIDR: '172.10.5.0/24'

###################
# VPC Resources
###################

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - 
         Key: Environment
         Value:  !Sub ${EnvironmentName}
        - 
         Key: Name
         Value:  !Sub ${Name}
        - 
         Key: Project
         Value:  !Sub ${Name}

  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1b"
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - 
         Key: Environment
         Value:  !Sub ${EnvironmentName}
        - 
         Key: Name
         Value:  !Sub ${Name}-subnetPublic1
        - 
         Key: Project
         Value:  !Sub ${Name}

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1c"
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - 
         Key: Environment
         Value:  !Sub ${EnvironmentName}
        - 
         Key: Name
         Value:  !Sub ${Name}-subnetPublic2
        - 
         Key: Project
         Value:  !Sub ${Name}

  # two private subnets where containers will only have private
  # IP addresses, and will only be reachable by other members of the
  # VPC
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1b"
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
      Tags:
        - 
         Key: Environment
         Value:  !Sub ${EnvironmentName}
        - 
         Key: Name
         Value:   !Sub ${Name}-subnetPrivate1
        - 
         Key: Project
         Value:  !Sub ${Name}
      
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1c"
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
      Tags:
        - 
         Key: Environment
         Value:  !Sub ${EnvironmentName}
        - 
         Key: Name
         Value: !Sub ${Name}-subnetPrivate2
        - 
         Key: Project
         Value: !Sub ${Name}

  # RDS private subnets

  PrivateSubnetDbOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1b"
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateDbOne', 'CIDR']
      Tags:
        - 
         Key: Environment
         Value:  !Sub ${EnvironmentName}
        - 
         Key: Name
         Value:   !Sub ${Name}-subnetPrivateDb1
        - 
         Key: Project
         Value:  !Sub ${Name}
      
  PrivateSubnetDbTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1c"
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateDbTwo', 'CIDR']
      Tags:
        - 
         Key: Environment
         Value:  !Sub ${EnvironmentName}
        - 
         Key: Name
         Value: !Sub ${Name}-subnetPrivateDb2
        - 
         Key: Project
         Value: !Sub ${Name} 

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - 
         Key: Environment
         Value: !Sub ${EnvironmentName}
        - 
         Key: Name
         Value: !Sub ${Name}-igw
        - 
         Key: Project
         Value: !Sub ${Name}

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Setup networking resources for the private subnets. Containers
  # in these subnets have only private IP addresses, and must use a NAT
  # gateway to talk to the internet. We launch one NAT gateways.
  NatGatewayAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
        Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
      Tags:
        - 
         Key: Environment
         Value: !Sub ${EnvironmentName}
        - 
         Key: Name
         Value: !Sub ${Name}-NAT
        - 
         Key: Project
         Value: !Sub ${Name}

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - 
         Key: Environment
         Value: !Sub ${EnvironmentName}
        - 
         Key: Name
         Value: !Sub ${Name}-private-routetable
        - 
         Key: Project
         Value: !Sub ${Name}

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateRouteTableAssociationOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetOne

  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetTwo

## ADD A ROUTE TABLE FOR RDS 

  PrivateRdsRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - 
         Key: Environment
         Value: !Sub ${EnvironmentName}
        - 
         Key: Name
         Value: !Sub ${Name}-private-rds-routetable
        - 
         Key: Project
         Value: !Sub ${Name}

  PrivateRdsRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRdsRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateRdsRouteTableAssociationOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRdsRouteTable
      SubnetId: !Ref PrivateSubnetDbOne

  PrivateRdsRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRdsRouteTable
      SubnetId: !Ref PrivateSubnetDbTwo


Outputs:

  VpcId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Sub ${EnvironmentName}:VpcId

  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Sub ${EnvironmentName}:PublicSubnetOne

  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Sub ${EnvironmentName}:PublicSubnetTwo

  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref 'PrivateSubnetOne'
    Export:
      Name: !Sub ${EnvironmentName}:PrivateSubnetOne

  PrivateSubnetTwo:
    Description: Private subnet two
    Value: !Ref 'PrivateSubnetTwo'
    Export:
      Name: !Sub ${EnvironmentName}:PrivateSubnetTwo

  #RDS outputs
  PrivateSubnetDbOne:
    Description: Private Db subnet one
    Value: !Ref 'PrivateSubnetDbOne'
    Export:
      Name: !Sub ${EnvironmentName}:PrivateSubnetDbOne

  PrivateSubnetDbTwo:
    Description: Private Db subnet two
    Value: !Ref 'PrivateSubnetDbTwo'
    Export:
      Name: !Sub ${EnvironmentName}:PrivateSubnetDbTwo
