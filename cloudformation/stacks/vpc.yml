AWSTemplateFormatVersion: '2010-09-09'
Description: VPC cloudformation. VPC has 3 public subnet and 3 private subnet.

Parameters:
  Name:
    Type: String
    Description: "A friendly name that will be used for vpc resources."
  EnvironmentName:
    Type: String
    Description: "A friendly environment name that will be used for namespacing all cluster resources. Example: staging, qa, or production"

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
    PublicThree:
      CIDR: '10.0.2.0/24'
    PrivateOne:
      CIDR: '10.0.100.0/24'
    PrivateTwo:
      CIDR: '10.0.101.0/24'
    PrivateThree:
      CIDR: '10.0.102.0/24'

Resources:
  # VPC in which containers will be networked.
  # It has three public subnets, and three private subnets.
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - 
         Key: Environment
         Value:  !Sub ${EnvironmentName}
        - 
         Key: Name
         Value:  !Sub ${Name}-vpc
        - 
         Key: Project
         Value:  !Sub ${Name}-${EnvironmentName}

  # Three public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - 
         Key: Environment
         Value:  !Sub ${EnvironmentName}
        - 
         Key: Name
         Value:  !Sub ${Name}-subnetPublic1
        - 
         Key: Project
         Value:  !Sub ${Name}-${EnvironmentName}
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - 
         Key: Environment
         Value:  !Sub ${EnvironmentName}
        - 
         Key: Name
         Value:  !Sub ${Name}-subnetPublic2
        - 
         Key: Project
         Value:  !Sub ${Name}-${EnvironmentName}
  PublicSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicThree', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - 
         Key: Environment
         Value:  !Sub ${EnvironmentName}
        - 
         Key: Name
         Value:  !Sub ${Name}-subnetPublic3
        - 
         Key: Project
         Value:  !Sub ${Name}-${EnvironmentName}

  # Three private subnets where containers will only have private
  # IP addresses, and will only be reachable by other members of the
  # VPC
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
      Tags:
        - 
         Key: Environment
         Value:  !Sub ${EnvironmentName}
        - 
         Key: Name
         Value:   !Sub ${Name}-subnetPrivate1
        - 
         Key: Project
         Value:  !Sub ${Name}-${EnvironmentName}
      
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
      Tags:
        - 
         Key: Environment
         Value:  !Sub ${EnvironmentName}
        - 
         Key: Name
         Value: !Sub ${Name}-subnetPrivate2
        - 
         Key: Project
         Value: !Sub ${Name}-${EnvironmentName}
  PrivateSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateThree', 'CIDR']
      Tags:
        - 
         Key: Environment
         Value: !Sub ${EnvironmentName}
        - 
         Key: Name
         Value: !Sub ${Name}-subnetPrivate3
        - 
         Key: Project
         Value: !Sub ${Name}-${EnvironmentName}

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - 
         Key: Environment
         Value: !Sub ${EnvironmentName}
        - 
         Key: Name
         Value: !Sub ${Name}-igw
        - 
         Key: Project
         Value: !Sub ${Name}-${EnvironmentName}
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetThree
      RouteTableId: !Ref PublicRouteTable

  # Setup networking resources for the private subnets. Containers
  # in these subnets have only private IP addresses, and must use a NAT
  # gateway to talk to the internet. We launch three NAT gateways, one for
  # each private subnet.
  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
        Domain: vpc
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
        Domain: vpc
  NatGatewayThreeAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
        Domain: vpc
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
      Tags:
        - 
         Key: Environment
         Value: !Sub ${EnvironmentName}
        - 
         Key: Name
         Value: !Sub ${Name}-NAT1
        - 
         Key: Project
         Value: !Sub ${Name}-${EnvironmentName}
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo
      Tags:
        - 
         Key: Environment
         Value: !Sub ${EnvironmentName}
        - 
         Key: Name
         Value: !Sub ${Name}-NAT2
        - 
         Key: Project
         Value: !Sub ${Name}-${EnvironmentName}
  NatGatewayThree:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayThreeAttachment.AllocationId
      SubnetId: !Ref PublicSubnetThree
      Tags:
        - 
         Key: Environment
         Value: !Sub ${EnvironmentName}
        - 
         Key: Name
         Value: !Sub ${Name}-NAT3
        - 
         Key: Project
         Value: !Sub ${Name}-${EnvironmentName}
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - 
         Key: Environment
         Value: !Sub ${EnvironmentName}
        - 
         Key: Name
         Value: !Sub ${Name}-private-routetable-1
        - 
         Key: Project
         Value: !Sub ${Name}-${EnvironmentName}
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - 
         Key: Environment
         Value: !Sub ${EnvironmentName}
        - 
         Key: Name
         Value: !Sub ${Name}-private-routetable-2
        - 
         Key: Project
         Value: !Sub ${Name}-${EnvironmentName}
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo
  PrivateRouteTableThree:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - 
         Key: Environment
         Value: !Sub ${EnvironmentName}
        - 
         Key: Name
         Value: !Sub ${Name}-private-routetable-3
        - 
         Key: Project
         Value: !Sub ${Name}-${EnvironmentName}
  PrivateRouteThree:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableThree
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayThree
  PrivateRouteTableThreeAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableThree
      SubnetId: !Ref PrivateSubnetThree

Outputs:
  VpcId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Sub ${EnvironmentName}:VpcId
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Sub ${EnvironmentName}:PublicSubnetOne
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Sub ${EnvironmentName}:PublicSubnetTwo
  PublicSubnetThree:
    Description: Public subnet three
    Value: !Ref 'PublicSubnetThree'
    Export:
      Name: !Sub ${EnvironmentName}:PublicSubnetThree
  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref 'PrivateSubnetOne'
    Export:
      Name: !Sub ${EnvironmentName}:PrivateSubnetOne
  PrivateSubnetTwo:
    Description: Private subnet two
    Value: !Ref 'PrivateSubnetTwo'
    Export:
      Name: !Sub ${EnvironmentName}:PrivateSubnetTwo
  PrivateSubnetThree:
    Description: Private subnet three
    Value: !Ref 'PrivateSubnetThree'
    Export:
      Name: !Sub ${EnvironmentName}:PrivateSubnetThree